# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:


External Dependency:

npm install @mui/material @emotion/react @emotion/styled
npm install @mui/icons-material
npm install react-router-dom
npm install react-scroll
npm install gh-pages
npm install @supabase/supabase-js
npm install slick-carousel





Drop down to biodata change theme || Done
Update list image of biodata section
Message section on BiodataMaster || Partial Done
Font and row size save to db || Done
Payment Gateway Integration || Done
Track Status for mobile view || Done
Write Standard message for whatsapp 
Text verification and improvement
Store All Key In Env File || Done
Title Helmet
SEO optimization and google analytics
Homepage navmenu to fixed || Done
Hindi Implementation MasterBiodata || Partial
Loader || Done
Add Popup when save the font size 
Flow Type Color || Done
Photo Frame circle on  biodata master dynamic size
Whatsapp Messaga
Testing :)




export REACT_APP_SUPABASE_URL=YOUR_KEY
export REACT_APP_SUPABASE_KEY=YOUR_KEY
export REACT_APP_RAZORPAY_KEY=YOUR_KEY
export REACT_APP_APPLICATION_URL=https://abhishek04012005.github.io/revamp-biodata-ditvi/
npm run build
npm run deploy




USE Company;



const initiatePayment = async () => {
  if (!window.Razorpay) {
    setError("Payment system is not loaded yet. Please try again.");
    return;
  }
  try {
    const paymentRequest = await PaymentRequestStorage.initiatePaymentRequest({
      requestNumber: requestNumber,
      amount: requestData.model_details.amount,
    });

    if (paymentRequest) {
      const options = {
        ...getRazorpayOptions({
          paymentRequest,
          requestNumber,
          handlePaymentSuccess,
          handlePaymentCancelled,
        }),
        modal: {
          ondismiss: function() {
            console.log('Payment modal closed');
          }
        },
        handler: function(response) {
          if (response.razorpay_payment_id) {
            handlePaymentSuccess(response, paymentRequest.id);
          }
        }
      };

      const razorpayInstance = new window.Razorpay(options);

      razorpayInstance.on('payment.failed', function(response) {
        razorpayInstance.close();
        setTimeout(() => {
          handlePaymentFailure(response, paymentRequest.id);
        }, 300);
      });

      razorpayInstance.open();
    } else {
      setError("Failed to initiate payment");
    }
  } catch (err) {
    console.error("Payment initiation error:", err);
    setError("Error initiating payment");
  }
};

const handlePaymentFailure = async (response, paymentRequestId) => {
  try {
    const dbResponse = await PaymentRequestStorage.updatePaymentStatus(
      paymentRequestId,
      {
        status: PaymentStatus.Failed,
        response: response,
        error_code: response.error.code,
        error_description: response.error.description,
      }
    );

    if (dbResponse) {
      navigate(`/payment-failure/${requestNumber}`, {
        state: {
          requestNumber: requestNumber,
          userDetails: requestData.user_details,
          modelDetails: requestData.model_details,
          error: response.error
        },
      });
    } else {
      throw new Error("Failed to update payment status");
    }
  } catch (error) {
    console.error("Error handling payment failure:", error);
    alert("Something went wrong while processing your payment. Please contact support.");
  }
};