# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:


External Dependency:

npm install @mui/material @emotion/react @emotion/styled
npm install @mui/icons-material
npm install react-router-dom
npm install react-scroll
npm install gh-pages
npm install @supabase/supabase-js
npm install slick-carousel





Drop down to biodata change theme || Done
Update list image of biodata section
Message section on BiodataMaster || Partial Done
Font and row size save to db || Done
Payment Gateway Integration || Done
Track Status for mobile view || Done
Write Standard message for whatsapp 
Text verification and improvement
Store All Key In Env File || Done
Title Helmet
SEO optimization and google analytics
Homepage navmenu to fixed || Done
Hindi Implementation MasterBiodata || Partial
Loader || Done
Add Popup when save the font size 
Flow Type Color || Done
Photo Frame circle on  biodata master dynamic size
Whatsapp Messaga
Testing :)


REACT_APP_SUPABASE_URL=https://jgkgpmvynvzbxcsyeeth.supabase.co
REACT_APP_SUPABASE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Impna2dwbXZ5bnZ6Ynhjc3llZXRoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0NjcyOTI3MiwiZXhwIjoyMDYyMzA1MjcyfQ.davleCKvqYV7_mnuD-0jscY-94889_rjtYUQTbjmH4c
REACT_APP_RAZORPAY_KEY=rzp_live_HvH8c7vXtsOEjK



import React, { useState, useEffect } from "react";
import {
  Delete,
  Refresh,
  Search,
  FilterList,
  Visibility,
  Close,
} from "@mui/icons-material";
import "./ContactUsDashboard.css";
import { ContactUsStorage } from "../../../supabase/ContactUs";
import Loader from "../../../structure/Loader/Loader";

const ContactUsDashboard = () => {
  const [contacts, setContacts] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedContact, setSelectedContact] = useState(null);
  const [sortConfig, setSortConfig] = useState({
    key: "created_at",
    direction: "desc",
  });
  const [deleteModal, setDeleteModal] = useState({
    show: false,
    contactId: null,
  });

  useEffect(() => {
    fetchContacts();
  }, []);

  const fetchContacts = async () => {
    try {
      setIsLoading(true);
      const data = await ContactUsStorage.getAllContactUs();
      setContacts(data);
    } catch (error) {
      console.error("Error:", error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleDelete = async () => {
    try {
      setIsLoading(true);
      await ContactUsStorage.deleteContactUsById(deleteModal.contactId);
      setContacts(
        contacts.filter((contact) => contact.id !== deleteModal.contactId)
      );
      setDeleteModal({ show: false, contactId: null });
    } catch (error) {
      console.error("Error:", error);
    }
    finally {
      setIsLoading(false);
    }
  };

  const showDeleteModal = (id) => {
    setDeleteModal({ show: true, contactId: id });
  };

  const handleSort = (key) => {
    setSortConfig({
      key,
      direction:
        sortConfig.key === key && sortConfig.direction === "asc"
          ? "desc"
          : "asc",
    });
  };

  const handleViewDetails = (contact) => {
    
    setSelectedContact(contact);
  };

  const sortedContacts = [...contacts].sort((a, b) => {
    if (sortConfig.direction === "asc") {
      return a[sortConfig.key] > b[sortConfig.key] ? 1 : -1;
    }
    return a[sortConfig.key] < b[sortConfig.key] ? 1 : -1;
  });

  const filteredContacts = sortedContacts.filter(
    (contact) =>
      contact.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      contact.email.toLowerCase().includes(searchTerm.toLowerCase()) ||
      contact.message.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <div className="contact-dashboard">
    
      <div className="dashboard-header">
        <button className="refresh-btn" onClick={fetchContacts}>
          <Refresh /> Refresh
        </button>
      </div>

      {/* Modal for Contact Details */}
      {selectedContact && (
        <div
          className="contact-modal-overlay"
          onClick={() => setSelectedContact(null)}
        >
          <div className="contact-modal" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <h2>Contact Details</h2>
              <button
                className="close-btn"
                onClick={() => setSelectedContact(null)}
              >
                <Close />
              </button>
            </div>
            <div className="modal-content">
              <div className="detail-row">
                <span className="detail-label">Number:</span>
                <span className="detail-value">{selectedContact.number}</span>
              </div>
              <div className="detail-row">
                <span className="detail-label">Name:</span>
                <span className="detail-value">{selectedContact.name}</span>
              </div>
              <div className="detail-row">
                <span className="detail-label">Email:</span>
                <span className="detail-value">{selectedContact.email}</span>
              </div>
              <div className="detail-row">
                <span className="detail-label">Mobile:</span>
                <span className="detail-value">{selectedContact.mobile}</span>
              </div>
              <div className="detail-row">
                <span className="detail-label">Date:</span>
                <span className="detail-value">
                  {new Date(selectedContact.created_at).toLocaleString(
                    "en-US",
                    {
                      day: "numeric",
                      month: "long",
                      year: "numeric",
                      hour: "2-digit",
                      minute: "2-digit",
                    }
                  )}
                </span>
              </div>
              <div className="detail-row message">
                <span className="detail-label">Message:</span>
                <p className="detail-value message-text">
                  {selectedContact.message}
                </p>
              </div>
            </div>
          </div>
        </div>
      )}
      {/* End of Modal */}

      {/* Delete Confirmation Modal */}
      {deleteModal.show && (
        <div
          className="delete-modal-overlay"
          onClick={() => setDeleteModal({ show: false, contactId: null })}
        >
          <div className="delete-modal" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <h2>Confirm Delete</h2>
              <button
                className="close-btn"
                onClick={() => setDeleteModal({ show: false, contactId: null })}
              >
                <Close />
              </button>
            </div>
            <div className="modal-content">
              <p>Are you sure you want to delete this contact?</p>
              <p>This action cannot be undone.</p>
              <div className="modal-actions">
                <button
                  className="cancel-btn"
                  onClick={() =>
                    setDeleteModal({ show: false, contactId: null })
                  }
                >
                  Cancel
                </button>
                <button className="confirm-delete-btn" onClick={handleDelete}>
                  Delete
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      <div className="dashboard-controls">
        <div className="search-box">
          <Search />
          <input
            type="text"
            placeholder="Search by name, email or message..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </div>
      </div>

      <div className="contacts-table-container">
        <table className="contacts-table">
          <thead>
            <tr>
              <th onClick={() => handleSort("name")}>
                Number <FilterList />
              </th>
              <th onClick={() => handleSort("name")}>
                Name <FilterList />
              </th>
              <th onClick={() => handleSort("email")}>
                Email <FilterList />
              </th>
              <th onClick={() => handleSort("phone")}>
                Mobile <FilterList />
              </th>
              <th>Message</th>
              <th onClick={() => handleSort("created_at")}>
                Date <FilterList />
              </th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {filteredContacts.map((contact) => (
              <tr key={contact.id} className="contact-row">
                <td>{contact.number}</td>
                <td>{contact.name}</td>
                <td>{contact.email}</td>
                <td>{contact.mobile}</td>
                <td>
                  <div className="message-cell">{contact.message}</div>
                </td>
                <td>
                  {new Date(contact.created_at).toLocaleDateString("en-US", {
                    day: "numeric",
                    month: "short",
                    year: "numeric",
                  })}
                </td>
                <td className="action-buttons">
                  <button
                    className="view-btn"
                    onClick={() => handleViewDetails(contact)}
                    title="View Details"
                  >
                    <Visibility />
                  </button>
                  <button
                    className="delete-btn"
                    onClick={() => showDeleteModal(contact.id)}
                    title="Delete"
                  >
                    <Delete />
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      {isLoading && <Loader />}
    </div>
  );
};

export default ContactUsDashboard;













.contact-dashboard {
  padding: 2rem;
  background-color: #f8f9fa;
  min-height: 100vh;
  margin-top: 5rem;
}

.dashboard-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
}

.dashboard-header h1 {
  color: #2c3e50;
  font-size: 2rem;
  font-weight: 600;
}

.refresh-btn {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.75rem 1.5rem;
  background-color: #4CAF50;
  color: white;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  transition: transform 0.2s, background-color 0.2s;
}

.refresh-btn:hover {
  background-color: #45a049;
  transform: translateY(-2px);
}

.dashboard-controls {
  margin-bottom: 2rem;
}

.search-box {
  display: flex;
  align-items: center;
  background-color: white;
  padding: 0.75rem 1rem;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  max-width: 400px;
}

.search-box input {
  border: none;
  outline: none;
  padding: 0.5rem;
  margin-left: 0.5rem;
  font-size: 1rem;
  width: 100%;
}

.contacts-table-container {
  background-color: white;
  border-radius: 12px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  overflow: hidden;
}

.contacts-table {
  width: 100%;
  border-collapse: collapse;
}

.contacts-table th {
  background-color: #f8f9fa;
  padding: 1rem;
  text-align: left;
  font-weight: 600;
  color: #2c3e50;
  cursor: pointer;
  transition: background-color 0.2s;
}

.contacts-table th:hover {
  background-color: #e9ecef;
}

.contacts-table td {
  padding: 1rem;
  border-bottom: 1px solid #dee2e6;
}

.message-cell {
  max-width: 300px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.contact-row {
  transition: background-color 0.2s;
  text-align: left;
}

.contact-row:hover {
  background-color: #f8f9fa;
}

.delete-btn {
  padding: 0.5rem;
  background-color: #dc3545;
  color: white;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  transition: all 0.2s;
}

.delete-btn:hover {
  background-color: #c82333;
  transform: scale(1.1);
}

.loading-spinner {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 200px;
}

.spinner {
  width: 40px;
  height: 40px;
  border: 4px solid #f3f3f3;
  border-top: 4px solid #3498db;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

@media (max-width: 768px) {
  .contact-dashboard {
    padding: 1rem;
  }

  .contacts-table-container {
    overflow-x: auto;
  }

  .message-cell {
    max-width: 150px;
  }

  .dashboard-header {
    flex-direction: column;
    gap: 1rem;
    align-items: flex-start;
  }

  .search-box {
    max-width: 100%;
  }
}
.contact-modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
  animation: fadeIn 0.3s ease;
}

.contact-modal {
  background: white;
  border-radius: 12px;
  width: 90%;
  max-width: 600px;
  max-height: 90vh;
  overflow-y: auto;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
  animation: slideIn 0.3s ease;
}

.modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1.5rem;
  border-bottom: 1px solid #eee;
}

.modal-header h2 {
  margin: 0;
  color: #2c3e50;
  font-size: 1.5rem;
}

.close-btn {
  background: none;
  border: none;
  cursor: pointer;
  color: #666;
  padding: 0.5rem;
  border-radius: 50%;
  transition: all 0.2s;
}

.close-btn:hover {
  background-color: #f5f5f5;
  color: #333;
}

.modal-content {
  padding: 1.5rem;
}

.detail-row {
  margin-bottom: 1.5rem;
  display: flex;
  gap: 1rem;
}

.detail-label {
  font-weight: 600;
  color: #666;
  min-width: 100px;
}

.detail-value {
  color: #2c3e50;
  flex: 1;
}

.detail-row.message {
  flex-direction: column;
  gap: 0.5rem;
}

.message-text {
  background-color: #f8f9fa;
  padding: 1rem;
  border-radius: 8px;
  white-space: pre-wrap;
}

.action-buttons {
  display: flex;
  gap: 0.5rem;
}

.view-btn {
  padding: 0.5rem;
  background-color: #3498db;
  color: white;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  transition: all 0.2s;
}

.view-btn:hover {
  background-color: #2980b9;
  transform: scale(1.1);
}

@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

@keyframes slideIn {
  from {
    transform: translateY(-20px);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}

/* Add responsive styles */
@media (max-width: 768px) {
  .contact-modal {
    width: 95%;
    margin: 10px;
  }

  .detail-row {
    flex-direction: column;
    gap: 0.5rem;
  }

  .detail-label {
    min-width: auto;
  }
}

.delete-modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.7);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
  backdrop-filter: blur(4px);
  animation: fadeIn 0.3s ease;
}

.delete-modal {
  background: white;
  border-radius: 12px;
  padding: 25px;
  width: 450px;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.15);
  transform-origin: center;
  animation: scaleIn 0.3s ease;
}

.delete-modal .modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 25px;
  padding-bottom: 15px;
  border-bottom: 2px solid #f1f1f1;
}

.delete-modal h2 {
  margin: 0;
  color: #2c3e50;
  font-size: 1.5rem;
  font-weight: 600;
  display: flex;
  align-items: center;
  gap: 10px;
}

.delete-modal h2::before {
  content: '⚠️';
  font-size: 1.4rem;
}

.delete-modal .modal-content {
  text-align: center;
  padding: 20px 0;
}

.delete-modal .modal-content p {
  margin: 12px 0;
  color: #4a5568;
  line-height: 1.6;
}

.delete-modal .modal-content p:first-child {
  font-size: 1.1rem;
  font-weight: 500;
  color: #2d3748;
}

.modal-actions {
  display: flex;
  justify-content: center;
  gap: 15px;
  margin-top: 25px;
}

.cancel-btn {
  padding: 10px 24px;
  border: 2px solid #e2e8f0;
  background: white;
  border-radius: 8px;
  cursor: pointer;
  transition: all 0.3s ease;
  font-weight: 500;
  color: #4a5568;
  font-size: 0.95rem;
}

.confirm-delete-btn {
  padding: 10px 24px;
  border: none;
  background: #dc3545;
  color: white;
  border-radius: 8px;
  cursor: pointer;
  transition: all 0.3s ease;
  font-weight: 500;
  font-size: 0.95rem;
  position: relative;
  overflow: hidden;
}

.cancel-btn:hover {
  background: #f7fafc;
  border-color: #cbd5e0;
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
}

.confirm-delete-btn:hover {
  background: #c82333;
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(220, 53, 69, 0.3);
}

.cancel-btn:active,
.confirm-delete-btn:active {
  transform: translateY(0);
  box-shadow: none;
}

/* Animations */
@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

@keyframes scaleIn {
  from {
    transform: scale(0.95);
    opacity: 0;
  }
  to {
    transform: scale(1);
    opacity: 1;
  }
}

/* Responsive Design */
@media (max-width: 768px) {
  .delete-modal {
    width: 90%;
    margin: 20px;
    padding: 20px;
  }
  
  .modal-actions {
    flex-direction: column-reverse;
    gap: 10px;
  }
  
  .cancel-btn,
  .confirm-delete-btn {
    width: 100%;
    padding: 12px;
  }
}

/* Focus States for Accessibility */
.cancel-btn:focus,
.confirm-delete-btn:focus {
  outline: none;
  box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.5);
}
